cv2.imread(filename,flags=None) 
파이썬에서 이미지를 불러올때
기본 None 은 컬러를 출력한다.

img(변수명)= cv2.imread('파일네임',cv2.IMREAD_COROR) 컬러형태로 불러오기
cv2.IMREAD_GRAYSCALE  // 흑백으로 불러오기
cv2.IMREAD_UNCHANGED  영상파일속성 스대로읽기 투명한 PNG파일

이후 꼭 if img is None: 이라는 예외처리 코드 필요.
불러온 영상데이터는 (numpy.ndarray) 

cv2.imwrite('filename',img(변수이름),params=None) 

cv2.IMWRITE_JPEG_QUALITY,90 : 이건 파일 압축률을 90%로 지정

retval = 정상저장되면 True 실패는 False
=======================================================================

cv2.namewindow(winname, flags=None)

winname 창 고유 이름(문자열)
flags 창 속성 지정 플래그로 
cv2.WINDOW_NORMAL 영상크기를 창 크기에 맞게 지정
cv2.WINDOW_AUTOSIZE 창 크기를 영상 크기에 맞게 변경(기본값)

=======================================================================
cv2.destroyWindow(winname) ->None
cv2.destroyALLWindow() -> None

winname : 닫고자 하는 창 이름
참고사항 -
cv2.destroyWindow() 함수는 지정한 창 하나만 닫고, cv2.destroyAllWindows()함수는 열려 있는 창을 모두 닫음.
일반적인 경우는 프로그램 종료 시 운영 체제에 의해 열려 있는 모든 창이 자동으로 닫힘.
즉, 함수를 이용하여 코드를 돌릴때 이 창을 닫고싶으면 중간에 집어넣는거

=============================================================================
cv2.moveWindow(winname,x,y) -> None
winname 창이름
x,y : 이동할 위치 좌표

===================================================================================
cv2.resizeWindow(winname, width, height) -None
winname : 창이름
width : 변경할 창의 가로크기
height : 변경할 창의 세로크기

참고사항 
창 생성시 cv2.WINDOW_NOMAL 속성으로 생성되어야 동작함. //이떄가 창을 마음대로 드래그로 변경가능한 상태.
영상 출력 부분의 크기만을 고려함(제목 표시줄, 창 경계는 고려되지 않음)

====================================================================================
cv2.imshow(winname, mat) -> None

winname 영상 출력 대상 창이름 (문자열)
mat 영상데이터(numpy.ndarray)

참고사항
간혹 mat에 일반 정수값을 입력해도 오류가 나지는 않음. 하지만  정수값의 경우 255로 나누고 실수형인 경우는 255를 곱해서 출력 -> 정수값으로 변형 해서 출력 ) 즉, 이상하게 출력될것인데 반드시 uint8로 주는게 좋다.
type 변환 함수로 화면에 uint8로 주는게 안전하다. (해결방법)


uint16,int32 자료형 행렬의 경우, 행렬 원소값을 255로 나눠서 출력
float32.float64 자료형 행렬의 경우, 행렬 원소값에 255를 곱해서 출력
만약 winname에 해당하는 창이 없으면 창을 새로 만들어서 영상을 출력
windows 운영체제에서는 컨트롤 c amd v 지원
실제로는 cv2.waitKey() 함수를 호출해야 화면에 영상이 나타남

여기서 namedWindow 뒤에 있는 imshow는 전좌가 없어도 실행가능하지만 수정이 안됨. 그래서 큰 사진은 받아서 하는게 맞음.
또한 waitKey가 없으면 출력이 되지도않음.
======================================================================================

cv2.waitKey(delay=None) -> retval

delay: 밀리초 단위 대기 시간.delay<= 0 이면 무한히 기다림. 기본값은 0
retval 눌린 키 값(ASCII code). 키가 눌리지않으면 -1

여기서 특정 키의 값을 확인하려면 ord() 함수 사용
while True:
	if cv2.waitKey() == ord('q')
		break;
		
===========================================================================================

imread로 그냥불러오면 RGB순서의 컬러데이터 예상
정상 출력하려면 cv2.cvtColor() 함수로 GBR 순서를 RGB로 바꿔서 출력해야함.
그레이 스케일은
plt,imshow() 함수에서 컬러맵을 cmap='gray'으로 지정해서 불러야함.

===============================================================
특정 폴도에 있는 이미지파일 목록 읽기

os.listdir()

import os

file_list = os.listdir('.\\images')
img_files = [file for file in file_list if file.endswith('.jpg')]  //그중 jpg만

glob.glob() //특정 패턴의 문자형으로 된걸 다 불러옴

import glob
img_files = glob.glob('.\\image\\*.jpg) //이미지 폴더중에 모든 jpg
 여기서 문제가 발생함.
 파일을 찾을 수 없다는 문제였는데 해결방법은 이렇다.
 import os 
 path = "/home/~~/images/"  #path에 파일 경로 저장
 files_list = os.listdir(path) #path 대입
 img_files = [file for file in file_list if file.endswith('.jpg')]
 img_files.sort() #이미지 정렬
 
 이렇게 해서 images파일에 있는 jpg파일을 모두 불러올 수 있었다. 
========================================================================

영상의 속성과 픽셀 값 정리.

Opencv는 영상 데이터를 numpy.ndarray로 표현한다.

ex)
import cv2

img1 = cv2.imread('cat.bmp', cv2.IMREAD_GRAYSCALE)
img2 = cv2.imread('cat.bmp', cv2.IMREAD_COLOR)

img1, 2는 numpy.ndarray로 저장된다.
ndim: 차원수 .len(img.shape)와 같다. 2면 그레이 스케일, 3이면 컬러라고 판단.
shape : 각 차원의 크기 (h,w) 그레이스케일, (h,w,3) 컬러영상.
size : 전체 원소 개수
dtype:원소의 데이터 타입. 영상 데이터는 uint8. 

그레이 스케일영상 : cv2.CV_8UC1 -> numpy.uint8, shape = (h, w)
컬러영상         : cv2.CV_8UC3 -> numpy.uint8, shape = (h, w, 3)

영상의 속성 참조예제
for y in range(h): #파이썬은 이런함수가 되게 느리게 작동함.
    for x in range(w):
        img1[y, x] = 0
        img2[y, x] = (0, 255, 255)  #값을 집어넣음   

다른 방식으로는 
img1[:,:] = 255
img2[:,:] = (0, 0, 255) #이 함수를 많이 사용함.

========================================================================
지정한 크기로 새 영상 생성하기.
numpy.empty(shape, dtype = float, ) -> arr     //임의의 값으로 초기화된 배열을 생성한다
numpy.zeros(shape, dtype = float, ) -> arr     // 0으로 최고환된 배열을 생성
numpy.ones(shape, dtype = None, ) -> arr	 // 1로 초기화된 배열을 생성
numpy.full(shape, fill_value, dtype = None, ) -> arr  //fill_value로 초기화된 배열을 생성1

shape: 각 차원의 크기.(h,w) 또는 (h,w,3)
dtype: 원소의 데이터 타입. 일반적인 영상이면 numpy.uint8 지정
arr  : 생성된 영상(numpy.ndarray)

============================================================
ROI (Region of interest) 관심영역
영상에서 특정 연산을 수행하고자하는 임의의 부분 영역

마스크 연산
-OpenCV는 일부 함수에 대해 ROI 연산을 지원함, 이때 마스크 영상을 인자로 함께 전달해야함.
e.g ) cv2.copyTo(), cv2.calcHist(),cv2.bitwise_or(), cv2.matchTemplate()

거의 그레이 스케일 영상으로 만들어서 사용하지만 실제로는 0이 아닌 위치에서만 연산이 수행됨.
(사람의 눈으로는 0과 1의 차이가 거의없기에) 마스크 영상으로는 0~ 255로 구성된 이진영상(binary image)를 사용

마스크연산을 지원하는 픽셀값 (복사 함수)
cv2.copyTo(src, mask, dst=None) -> dst    // 전체가 아닌 마스크 영상에서 (흰색으로 되어있는) 부분을 복사 

src: 입력영상 
mask: 마스크영상 cv.2.CV_8U.(numpy.uint8) 0이 아닌 픽셀에 대해서만 복사 연산을 수행
dst: 출력영상 만약 src와 크기 및 타입이 같은 dst를 입력으로 지정하면 dst를 새로 생성하지 않고 연산 수행 그렇지 않으면 -> dst를 새로 생성하여 연산을 수행후 반환

여기서 src와 mask와 dst는 사이즈가 같아야하고 
src가 dst는 컬러면 컬러 그레이면 그레이
하지만 mask는 무조건 그레이스케일

여기서 numpy로 진행한다하면
dst[mask > 0 ] = src[mask >0 ] 0보다 크면 이제 dst에 저장 입력- 출력의 부분과 동일.

=================================
OpenCV 그리기 함수.

OpenCV는 영상에 선, 도형, 문자열을 출력하는 그리기 함수를 제공한다.
선 그리기: 직선, 화살표, 마커등
도형 그리기: 사각형, 원, 타원, 다각형 등
문자열 출력

그리기 함수 사용시 주의
- 그리기 알고리즘을 이용하여 영상의 픽셀 값 자체를 변경
-> 원본 영상 필요시 복사본 만들어서 그리기 & 출력

-그레이 스케일 영상에는 컬러로 그리기 안된다.
cv2.cvrColor()함수로 BGR컬러 영상으로 변환한 후 그리기 함수 호출

#직선 그리기 함수 *
cv2.line(img,pt1, pt2, color, thinkness = None, lineType= None, shift= None) -> img

img: 그림을 그릴 영상 //입력과 리턴값으로 이용
pt1,pt2: 직선의 시작점과 끝점
color: 선 색상 또는 밝기. (B,G,R) 튜플 또는 정수값.
thinkness: 선 두께, 기본값은 1
lineType: 선 타입, cv2.LINE_4, cv2.LINE_8, cv2.LINE_AA(조금 부드러운 선을 그리고싶을때) 중 선택.
 									기본값은 cv2.LINE_8
shift: 그리기 좌표 값의 축소비율. 기본값은 0 

#사각형 그리기 함수*
cv2.rectangle(img, pt1, pt2, color, thinkess = None, lineType=None, shift=None) -> img
cv2.rectangle(img, rec, color, thinkess = None, lineType=None, shift=None) -> img


img: 그림을 그릴 영상
pt1,pt2: 사각형의 두 꼭지점 x,y 좌표값 튜플
rec:사각형 위치정보.(x,y,w,h)튜플
color: 선 색상 또는 밝기.(B,G,R) 튜플 또는 정수값.
thickness: 선 두께. 기본값은 1. 음수(-1)를 지정하면 내부를 채운다.
lineType: 선 타입. cv2.LINE_4,cv2.LINE_8,cv2.LINE_AA중 선택. 기본값은 cv2.LINE_8
shift: 그리기 좌표 값의 축소비율. 기본값은 0


#원 그리기 함수############33
cv2.circle(img, center, radius, color, thickness=None, lineType=None, shift=None) -> img

img:그림을 그릴 영상
center: 중심좌표
radius: 원 반지름
color: 선 색상 또는 밝기(B,G,R) 튜플 또는 정수값.
thickness: 선 두께. 기본값 1 음수(-1)를 지정하면 내부를 채워줌.
lineType: 선 타입. cv2.LINE_4,cv2.LINE_8,cv2.LINE_AA중 선택. 기본값은 cv2.LINE_8
shift: 그리기 좌표 값의 축소비율. 0 기본값은

#다각형 그리기 함수 #############
cv2.polylines(img,pts,isClosed,color,thickness=None,lineType=None,shift=None) -> img

img:그림을 그릴 영상
pts: 다각형 외각 점 들의 좌표 배열. numpy,ndarray의 리스트.
(e,g,)[np.array([10,10],[50,50],[10,50]],dtype=np.int32)]
isClosed: 폐 곡선 여부. True 또는 False 지정.
color: 선 색상 또는 밝기(B,G,R) 튜플 또는 정수값.
thickness: 선 두께. 기본값 1 음수(-1)를 지정하면 내부를 채워줌.
lineType: 선 타입. cv2.LINE_4,cv2.LINE_8,cv2.LINE_AA중 선택. 기본값은 cv2.LINE_8
shift: 그리기 좌표 값의 축소비율. 0 기본값은

##문자열 출력 함수 ##############
cv2.putText(img, text, org, fontFace, fontScale, color, thinckness=None, lineType= None. bottomLeftOrigin =None) -> img

img:그림을 그릴 영상
text: 출력할 문자열
orgL: 영상에서 문자열을 출력할 위치의 좌측 하단 좌표.
fontFace: 폰트종류. cv2.FONT_HERSHEY_로 시작하는 상수중 선택 SIMPLEX,PLAIN,DUPLEX,COMPLEX,TRIPLEX,SMALL,등등 fontFace 상수라고 찾으면 될듯
fontScale: 폰트 크기 확대/ 축소 비율
color: 선 색상 또는 밝기(B,G,R) 튜플 또는 정수값.
thickness: 선 두께. 기본값 1 음수(-1)를 지정하면 내부를 채워줌.
lineType: 선 타입. cv2.LINE_4,cv2.LINE_8,cv2.LINE_AA중 선택. 기본값은 cv2.LINE_8
bottomLeftOrigin: True이면 영사의 좌측 하단을 원점으로 간주. 기본

///////////////////////////////////////////////////////////////////////////////////////////////
openCV에서 카메라와 동영상 처리하기.

카메라와 동영상으로 부터 프레임을 받아오는 작업을
cv2.VideoCapture 클래스 하나로 처리한다.

#큰틀
open()카메라를 열거나 영상을열기 -> read() 받아오는 영상을 ndarray로 받아옴.

##카메라 열기
cv2.VideoCapture(index, apiPreference=None) -> retval  ##정수 값은 0부터 시작 컴퓨터의 기본카메라. 장치관리자에 등록되는 순서임. 
index : camera_id + domain_offset_id 시스템 기본 카메라를 기본 방법으로 열려면 index에 0을 전달.
apiPreference: 선호하는 카메라 처리 방법을 지정
retval: cv2.VideoCapture 객체

cv2.VideoCapture.open(index, apiPreference=None) -> retval
retval : 성공하면 True, 실패하면 False
##비디오 캡쳐가 준비되었는지 확인
cv2.VideoCapture.isOpened() -> retval 
retval : 성공하면 True, 실패하면 False (for, while루프로 확인)

##프레임 받아오기
cv2.VideoCapture.read(image=None) -> retval, image
retval : 성공하면 True, 실패하면 False (for, while루프로 확인)
image: 현재 프레임(numpy.ndarray)


##카메라, 비디오 장치 속성 값 참조
cv2.VideoCapture.get(propId) -> retval

propid: 속성함수
CAP_PROP_FRAME_WIDTH  프레임 가로크기
CAP_PROP_FRAME_HEIGHT 프레임 세로크기
CAP_PROP_FPS 	       초당 프레임 수
CAP_PROP_FRAME_COUNT  비디오 파일의 총 프레임 수
CAP_PROP_POS_MSEC     밀리초 단위로 현재 위치
CAP_PROP_POS_FRAMES   현재 프레임 번호
CAP_PROP_EXPOSURE     노출
이 외에도 VideoCapture 쪽 오픈CV에 더 많은게 있음.

retval: 성공하면 해당속성 값, 실패하면 0

##cv2.VideoCapture.set(propid.value) -> retval
propid: 속성함수
value: 속성값
retval: 성공하면 True, 실패하면 False
 
 ##동영상,정지 영상 시퀀스, 비디오 스트림 열기##
cv2.VideoCapture(filename, apiPreference=None) -> retval ## 카메라와 다른점은 filename이 들어간다.
filename : 
apiPreference: 선호하는 카메라 처리 방법을 지정
retval: cv2.VideoCapture 객체

cv2.VideoCapture(filename, apiPreference=None) -> retval
retval : 성공하면 True, 실패하면 False

////////////////////////////////////////////////////////////
동영상 파일 생성하기. 

cv2.VideoWriter 클래스
일련의 프레임을 동영상 파일로 저장할 수 있다.
프레임은 모두 크기와 데이터 타입이 같아야한다.

Fourcc (4문자코드, four character code) //어떤 압축방식을 사용할 것인가.
동영상 파일의 코덱, 압축 방식, 색상, 픽셀 포맷 등을 정의하는 정수 값
cv2.VideoWriter_fourcc(*'DIVX') DIVX MPENG-4 코덱
cv2.VideoWriter_fourcc(*'XVID') XVID MPENG-4 코덱
cv2.VideoWriter_fourcc(*'FMP4') FFMPEG MPENG-4 코덱
cv2.VideoWriter_fourcc(*'X264') H.264/AVC 코덱
cv2.VideoWriter_fourcc(*'MJPG') Motion-JPEG 코덱 더많은 코덱들이 있음.

#저장을 위한 동영상 파일 열기.
cv2.VideoWriter(filename, fourcc, fps, frameSize, isColor=None) -> retval

filename: 비디오 파일 이름(e.g. 'video.mp4')
fourcc: fourcc (e.g. cv2.VideoWirter_fourcc(*'DIVX'))
fps:	초당 프레임 수 (e.g. 30)
frameSize: 프레임 크기(e.g. [640, 480])
isColor: 컬러 영상이면 True, 그렇지않으면 False.
retval: cv2.VideoWriter 객체

cv2.VideoWriter.open(filename, fourcc, fps, frameSize, isColor=None) -> retval
retval: 성공하면 True, 실패하면 False.

##비디오 파일이 준비되었는지 확인
cv2.VideoWriter.isOpened() -> retval
retval: 성공하면 True, 실패하면 False.

##프레임 저장하기
cv2.VideoWriter.write(image) -> None
image: 저장할 프레임(numpy.ndarray)

### 키보드 입력 대기 함수
cv2.waitkey(delay=None) -> retval

delay: 밀친초 단위 대기 시간. delay <= 0 이면 무한히 기다림. 기본값은 0.
retval: 눌린 키 값 (ASCII code). 키가 눌리지 않으면 -1.

참고사항 
waitKey() 함수는 OpenCV 창이 하나라도 있을 때 동작함
특정 키 입력을 확인하려면 ord() 함수를 이용.
ex) while True:
	if cv2.waitkey() == ord('d'):
		break
		
주요 특수 키 코드: 27(ESC), 13(ENTER), 9(TAB)

특수키 사용시 cv2.waitKeyEx() 윈도우에서만 

### 마우스 이벤트 처리하기.

cv2.setMouseCallback(windowName, onMouse, param=None) -> None

windowName : 마우스 이벤트 처리를 수행할 창 이름.
param : 콜백 함수에 전달할 데이터
onMouse: 마우스 이벤트 처리를 위한 콜백 함수 이름.
	 마우스 이벤트 콜백 함수는 다음 형식을 따라야한다.
	 ex) onMouse(event, x, y, flags, param) -> None
	 
	     event : 마우스 이벤트 종류. cv2.EVENT_로 시작하는 함수 (마우스 좌우클릭,움작이기. 휠) 12개가 있는데 ex) cv2.EVENT_MOUSEMOVE -> 상수값으로 0임.
	     x,y: 마우스 이벤트 발생 좌표 (내가 띄운 창의 상대적인 좌표)
	     flags: 마우스 이벤트 발생 시 상태. cv2.EVENT_FLAG_로 시작하는 상수 // ex)  cv.EVENT_FLAG_LBUTTON -> 1임 대신 얘는 1 ,2 ,4 ,8, 16, 32 등등 있음
	     param: cv2.setMouseCallback() 함수에서 설정한 데이터.

## 트랙바 사용방법.

트랙바? 프로그램 동작 중 사용자가 지정한 범위 안의 값을 선택할 수 있는 컨트롤
OpenCV 에서 제공하는 그래픽 사용자 인터페이스

트랙바 생성 함수.
cv2.createTrackbar(trackbarName, windowName, value, count, onChange) -> None

trackbarName: 트랙바 이름
windowName: 트랙바를 생성할 창 이름.
value: 트랙바 위치 초기값.
count: 트랙바 최댓값, 최솟값은 항상 0.
onChange: 트랙바 위치가 변경될 때마다 호출할 콜백 함수 이름.

	트랙바 이벤트 콜백함수는 다음 형식
		onChange(pos) -> None

#연산 시간 측정 방법.
컴퓨터 비전은 대용량 데이터를 다루고, 일련의 과정을 통해 최종 결과를 얻으므로 매 단계에서 연산 시간을 측정하여 관리할 필요가 있음.

OpenCV 에서는 TickMeter 클래스를 이용하여 연산 시간을 측정.
cv2.TickMeter() -> tm

tm : cv2.TickMeter 객체
tm.start(): 시간 측정시작.
tm.stop() : 시간 측정 끝.
tm.reset(): 시간 측정 초기화.

tm.getTimeSec(): 측정 시간을 초 단위로 변환
tm.getTimeMilli(): 측정 시간을 초 단위로 변환
tm.getTimeMicro() : 측정 시간을 초 단위로 변환

예제 코드.
img = cv2.imread('hongkong.jpg')
im = cv2.TickMeter()
tm.start()

edge = cv2.Canny(img, 50, 150)

tm stop()
print('Elapsed time: {}ms.' .format(tm.getTimeMilli()))

2장 #[실전 코딩]
동영상 전환 이펙트
- 두 동영상 클립 사이에 추가되는 애니메이션 효과
- 페이드-인(fade-in) 페이드-아웃(fade-out), 디졸브(dissolve), 밀기, 확대 등

구현 할 기능
- 두 개의 동영상 동시 열기
- 첫 번째 동영상의 마지막N개 프레임과 두 번째 동영상의 처음 N개 프레임을 합성
- 합성된 영상을 동영상으로 저장하기.


